# This docker compose file is intended to be used for 
#   
#   DEPLOYMENT 
#
# Simply running 
#   docker compose up -d 
# should bring up all relevant services
#

services:
  # Define the services to run
  sb-postgres:
    # PostgreSQL service
    image: postgres:17-alpine
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${PSQL_USER}
      POSTGRES_PASSWORD: ${PSQL_PASSWORD}
      POSTGRES_DB: ${PSQL_DATABASE}
    volumes:
      - ./.local/data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-h", "postgres", "-U", "${PSQL_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  sb-sensbee:
    container_name: sensbee
    build:
      context: .
      dockerfile: Dockerfile
      target: server
    depends_on:
      - sb-postgres
    volumes:
      - ./config/:/etc/sensbee/:ro
    ports:
      - "8080:8080"
    restart: unless-stopped
    env_file:
      - .env

  # The admin interface for SensBee
  sb-service-SBMI:
    image: nginx:alpine
    container_name: sbmi
    ports:
      - "8082:80" # Should use 443 when used in prod
    volumes:
      - ./services/sbmi/static/:/usr/share/nginx/html/:ro
      - ./services/sbmi/nginx/nginx.conf:/etc/nginx/nginx.conf:ro

  # MQTT broker
  sb-service-mosquitto:
    container_name: mosquitto
    image: eclipse-mosquitto:2.0
    ports:
      - "1883:1883" # TCP clients
      - "9001:9001" # WebSocket clients
    volumes:
      - ./services/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    environment:
      - TZ=${TZ}
    restart: unless-stopped

  # Data transformation service
  sb-service-transform:
    container_name: data-transform
    build:
      context: ./services/node.js
      dockerfile: Dockerfile
    volumes:
      - ./services/node.js/test.js:/usr/src/app/test.js
    restart: unless-stopped

  # Event handler service
  sb-service-event-handler:
    container_name: sensbee-event-handler
    build:
      context: .
      dockerfile: Dockerfile
      target: event_handler
    depends_on:
      - sb-sensbee
    env_file:
      - .env
    restart: unless-stopped

  # OTel collector
  sb-service-otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector-contrib
    command: [ "--config=/etc/otel-collector.yaml" ]
    volumes:
      - "./services/grafana/otel-collector-config.yaml:/etc/otel-collector.yaml:ro"
    networks:
      - "otel-net" # Connect to the external grafana stack
      - "default" # All services in this compose can talk to the collector

  #####
  # Prod only services

  # Automatic Postgres backups
  postgres_backups:
    container_name: "postgres-backups"
    image: prodrigestivill/postgres-backup-local
    restart: unless-stopped
    volumes:
      - ./.local/data/postgres-backups:/backups
    depends_on:
      - sb-postgres
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${PSQL_DATABASE}
      - POSTGRES_USER=${PSQL_USER}
      - POSTGRES_PASSWORD=${PSQL_PASSWORD}
      #  - POSTGRES_PASSWORD_FILE=/run/secrets/db_password <-- alternative for POSTGRES_PASSWORD (to use with docker secrets)
      - POSTGRES_EXTRA_OPTS=--no-owner
      - SCHEDULE=@daily
      - BACKUP_KEEP_DAYS=7
      - BACKUP_KEEP_WEEKS=4
      - BACKUP_KEEP_MONTHS=6
      - HEALTHCHECK_PORT=8080
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
  # Watchtower
  # TODO


networks:
  otel-net:
    name: "otel-net"
